import re

# EXAMPLE URLs for service: 
# 1) Front end browser URL: http://www.cbc.ca/listen/shows/because-news/segment/10456353
#
# 2) API URL https://api-gw.radio-canada.ca/audio/v1/clips/10456353?inline=show
#	Adding ?inline=show to the URL also includes info on the show that the track belongs to
#
# 3) http://www.cbc.ca/listen/categories/news/clips/3?format=json
#	Third page of News category results
#
# http://www.cbc.ca/programguide/live.do?output=xml&networkKey=cbc_radio_one&locationKey=winnipeg
# http://tpfeed.cbc.ca/f/ExhSPC/cbc-live-radio

BASE_URL = 'https://api-gw.radio-canada.ca/audio/v1/clips/'
AudioStreamObject.language_code = Locale.Language.English

####################################################################################################
def NormalizeURL(url):
	Log('Parsing CBC Radio URL: ' + url)

	if re.search('^http(s?):\/\/(www\.)?cbc\.ca\/listen(\/)?(.+)?', url):
		try:
			new_url = url.rsplit('/', 1)[1]
			new_url = BASE_URL + new_url
			url = new_url
		except:
			Log('Could not convert cbc.ca/listen URL into an API URL. Given URL: ' + url)
			raise Ex.MediaNotAvailable

	# if (url.endswith('listen'))
	# 	url = url + '/'
	return url

####################################################################################################
def MetadataObjectForURL(url):
	Log('Getting metadata for CBC Radio URL: ' + url)
	try:
		page = JSON.ObjectFromURL(url + '?inline=show')
	except:
		raise Ex.MediaNotAvailable
	
	title = page['title']
	summary = page['description']

	# TODO: This is lazy; should get the thumbnail for the episode somehow instead of for the show
	thumb = page['show']['thumbnail'] 
	date = Datetime.ParseDate(page['releasedAtPretty'])
	duration = int(page['duration']) * 1000

	return TrackObject(
		title = title,
		summary = summary,
		originally_available_at	= date.date(),
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	Log('MediaObects URL: ' + url)

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayHLS, url=url))
			]
		)
	]

####################################################################################################
@indirect
def PlayHLS(url):
	Log('Getting media item URL for CBC Radio URL: ' + url)
	try:
		page = JSON.ObjectFromURL(url + '?inline=show')
	except:
		raise Ex.MediaNotAvailable

	if not page['url']:
		raise Ex.MediaNotAvailable

	Log('Returning CBC Radio media item at: ' + page['url'])
	return IndirectResponse(VideoClipObject, key=page['url'])