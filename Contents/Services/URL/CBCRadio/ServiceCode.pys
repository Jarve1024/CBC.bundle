import re

# EXAMPLE URLs for service: 
# 1) Front end browser URL: http://www.cbc.ca/listen/shows/because-news/segment/10456353
#
# 2) https://api-gw.radio-canada.ca/audio/v1/clips/10456353?inline=show
#	Specific audio clip by ID; Adding ?inline=show to the URL also includes info on the show that the track belongs to
#
# 3) https://api-gw.radio-canada.ca/audio/v1/shows/25
#	Details for show ID 25
#
# 4) https://api-gw.radio-canada.ca/audio/v1/shows/25/clips
#	List of clips for show ID 25
#
# 5) http://www.cbc.ca/listen/categories/news/clips/3?format=json
#	Third page of News category results
#
# 6) http://tpfeed.cbc.ca/f/ExhSPC/cbc-live-radio
#	Index of all live-streaming stations
# 
# 7) http://tpfeed.cbc.ca/f/ExhSPC/cbc-live-radio/673903171524
# 	Specific live-stream station (CBC Radio One: Prince George in this case)
#
# 8) http://www.cbc.ca/programguide/live.do?output=xml&networkKey=cbc_radio_one&locationKey=winnipeg
#	http://www.cbc.ca/programguide/next.do?output=xml&networkKey=cbc_radio_2&locationKey=edmonton
#	XML output with current or next program name


BASE_URL = 'https://api-gw.radio-canada.ca/audio/v1/clips/'
AudioStreamObject.language_code = Locale.Language.English

####################################################################################################
def NormalizeURL(url):
	Log.Debug('Parsing CBC Radio URL: ' + url)

	if re.search('^http(s?):\/\/(www\.)?cbc\.ca\/listen(\/)?(.+)?', url):
		try:
			new_url = url.rsplit('/', 1)[1]
			new_url = BASE_URL + new_url
			url = new_url
		except:
			Log.Debug('Could not convert cbc.ca/listen URL into an API URL. Given URL: ' + url)
			raise Ex.MediaNotAvailable

	return url

####################################################################################################
def MetadataObjectForURL(url):
	Log.Debug('Getting metadata for CBC Radio URL: ' + url)

	audio_type = GetAudioType(url)
	
	try:
		if (audio_type == 'live'):
			page = JSON.ObjectFromURL(url)
		else:
			page = JSON.ObjectFromURL(url + '?inline=show')
	except:
		raise Ex.MediaNotAvailable
	
	title = page['title']

	to = TrackObject(
	)

	if (audio_type == 'ondemand'):
		# TODO: This is lazy; should get the thumbnail for the episode somehow instead of for the show
		to.thumb = Resource.ContentsOfURLWithFallback(url=page['show']['thumbnail'])
		to.originally_available_at = Datetime.ParseDate(page['releasedAtPretty'])
		to.duration = int(page['duration']) * 1000
		to.summary = page['description']
		to.title = title

	elif (audio_type == 'live'):
		to.title = page['cbc$name'] + ' ' + page['cbc$network']
		to.artist = page['cbc$name']
		to.album = page['cbc$network']

		if page['thumbnails']:
			to.thumb = Resoruce.ContentsOfURLWithFallback(url=page['thumbnails'])

		metadata_url = GetLiveMetadataURL(page['content'])

		if (metadata_url):
			metadata = XML.ElementFromURL(url=metadata_url, cacheTime=0)
			
			program_name = metadata.xpath('//name/text()')

			if (len(program_name) > 0):
				to.summary = program_name[0]

	return to

####################################################################################################
def MediaObjectsForURL(url):

	Log.Debug('MediaObects URL: ' + url)

	return [
		MediaObject(
			container = Container.MP3,
			audio_codec = AudioCodec.MP3,
			audio_channels = 2,
			parts = [
				PartObject(key=Callback(PlayMedia, url=url, ext='MP3'))
			]
		)
	]

####################################################################################################
def PlayMedia(url, **kwargs):
	Log.Debug('Getting media item URL for CBC Radio URL: ' + url)
	
	audio_type = GetAudioType(url)
	
	try:
		if (audio_type == 'live'):
			page = JSON.ObjectFromURL(url)
		else:
			page = JSON.ObjectFromURL(url + '?inline=show')
	except:
		raise Ex.MediaNotAvailable

	if audio_type == 'live':
		audio_url = GetLiveMP3StreamURL(page['content'])

	else:
		audio_url = page['url']


	if not audio_url:
		raise Ex.MediaNotAvailable

	Log.Debug('Returning CBC Radio media item at: ' + audio_url)
	return Redirect(audio_url)

####################################################################################################
# Determine if the URL is for a live stream or an ondemand show
#
# http://tpfeed.cbc.ca/f/ExhSPC/cbc-live-radio/673903171524
def GetAudioType (url):
	if (re.match('^http(s?):\/\/tpfeed.cbc.ca/f/ExhSPC/cbc-live-radio(.+)?', url)):
		return 'live'
	else:
		return 'ondemand'

####################################################################################################
# Takes the stream['content'] array of media content from a live stream JSON entry, and 
# returns the url of the containing MP3 stream
def GetLiveMP3StreamURL (item):
    for i in item:
        if 'MP3' in i['assetTypes']:
            return i['streamingUrl']

    return False

####################################################################################################
# Takes the stream['content'] array of media content from a live stream JSON entry, and 
# returns the url of the containing Metadata URL
def GetLiveMetadataURL (item):
    for i in item:
        if 'Metadata' in i['assetTypes']:
            return i['streamingUrl']

    return False